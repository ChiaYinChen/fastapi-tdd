"""Utilities for generating and sending emails.

This module provides an abstract base class `EmailGenerator` for defining
email content and subject, and a concrete implementation `AccountVerificationEmail`
for sending account verification emails. It also includes an `EmailSender` class
that uses a strategy pattern to send emails generated by an `EmailGenerator`.

Attributes:
    TEMPLATE_FOLDER (Path): The path to the directory containing email templates.
"""
import smtplib
from abc import ABC, abstractmethod
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import formataddr
from pathlib import Path

from jinja2 import Template

from ..core.config import settings
from ..core.security import encode_url_safe_token

TEMPLATE_FOLDER = Path(__file__).parents[1] / "templates"


class EmailGenerator(ABC):
    """Abstract base class for email generation strategies.

    Subclasses must implement methods to define the email template, subject,
    and context. This class provides common functionality to generate and send
    the email message.
    """

    @abstractmethod
    def email_template(self) -> str:
        """Retrieves the email template file content.

        This method should be implemented to return the HTML content
        of the email template as a string.

        Returns:
            str: The HTML content of the email template.
        """
        pass

    @abstractmethod
    def email_subject(self) -> str:
        """Defines the email subject.

        Returns:
            str: The subject line for the email.
        """
        pass

    @abstractmethod
    def email_context(self, *args, **kwargs) -> dict:
        """Generates email context data for rendering the email template.

        Args:
            *args: Positional arguments to be used in context generation.
            **kwargs: Keyword arguments to be used in context generation.

        Returns:
            dict: A dictionary containing the context variables for the template.
        """
        pass

    def generate_email(self, recipients: list[str], *args, **kwargs) -> MIMEMultipart:
        """Constructs an email message with the specified template and context.

        Args:
            recipients (list[str]): A list of email addresses for the 'To' field.
            *args: Positional arguments passed to `email_context`.
            **kwargs: Keyword arguments passed to `email_context`. Can also include
                `sender_name` (str) and `cc` (list[str]).

        Returns:
            MIMEMultipart: The constructed email message object.
        """
        message = MIMEMultipart("alternative")
        message["Subject"] = self.email_subject()

        sender_name = kwargs.get("sender_name")
        if not sender_name:
            message["From"] = settings.MAIL_SENDER
        else:
            message["From"] = formataddr((sender_name, settings.MAIL_SENDER))

        message["To"] = ",".join(recipients)
        if cc := kwargs.get("cc"):
            message["Cc"] = ",".join(cc)

        template = Template(self.email_template())
        context = self.email_context(*args, **kwargs)
        html_content = template.render(**context)
        message.attach(MIMEText(html_content, "html"))

        return message

    async def send_email(self, recipients: list[str], *args, **kwargs) -> None:
        """Sends an email via an SMTP server using application settings.

        The email is generated using `generate_email` and then sent.

        Args:
            recipients (list[str]): A list of email addresses to send the email to.
            *args: Positional arguments passed to `generate_email`.
            **kwargs: Keyword arguments passed to `generate_email`.
        """
        message = self.generate_email(recipients, *args, **kwargs)
        with smtplib.SMTP(settings.MAIL_SERVER, settings.MAIL_PORT) as server:
            server.ehlo()
            server.starttls()
            server.ehlo()
            server.login(settings.MAIL_USERNAME, settings.MAIL_PASSWORD)
            server.sendmail(settings.MAIL_SENDER, recipients, message.as_string())


class AccountVerificationEmail(EmailGenerator):
    """Email generator for sending account verification emails.

    This class defines the template, subject, and context specific to
    account verification emails, including generating a verification URL.
    """

    def email_template(self) -> str:
        """Retrieves the account verification email template.

        Returns:
            str: The HTML content of the `account_verification.html` template.
        """
        template_path = TEMPLATE_FOLDER / Path("account_verification.html")
        return template_path.read_text()

    def email_subject(self) -> str:
        """Defines the subject for the account verification email.

        Returns:
            str: The email subject, "Account Verification".
        """
        return "Account Verification"

    def generate_verification_url(self, email: str) -> str:
        """Generates a unique, timed URL for email verification.

        Args:
            email (str): The email address to be included in the verification token.

        Returns:
            str: The full verification URL including the token.
        """
        token = encode_url_safe_token({"email": email})
        return f"{settings.DOMAIN}/api/accounts/email-verification?token={token}"

    def email_context(self, *args, **kwargs) -> dict:
        """Generates the context for the account verification email template.

        Expects `email` and `username` to be passed in `kwargs`.

        Args:
            *args: Not used by this implementation.
            **kwargs: Keyword arguments, expected to contain `email` (str)
                and `username` (str).

        Returns:
            dict: A dictionary with `user_name` and `verification_url` for the template.
        """
        verification_url = self.generate_verification_url(kwargs.get("email"))
        return {"user_name": kwargs.get("username"), "verification_url": verification_url}


class EmailSender:
    """A client class that uses an EmailGenerator strategy to send emails.

    This class decouples the email sending mechanism from the specific
    type of email being generated.

    Attributes:
        strategy (EmailGenerator): The email generation strategy to use.
    """

    def __init__(self, strategy: EmailGenerator):
        """Initializes the EmailSender with a specific email generation strategy.

        Args:
            strategy (EmailGenerator): An instance of a class derived from
                `EmailGenerator` (e.g., `AccountVerificationEmail`).
        """
        self.strategy = strategy

    async def send(self, recipients: list[str], *args, **kwargs) -> None:
        """Sends an email using the configured strategy.

        This method delegates the actual email sending to the `send_email`
        method of the `EmailGenerator` strategy.

        Args:
            recipients (list[str]): A list of email addresses to send the email to.
            *args: Positional arguments to be passed to the strategy's
                `email_context` and `generate_email` methods.
            **kwargs: Keyword arguments to be passed to the strategy's
                `email_context` and `generate_email` methods.
        """
        await self.strategy.send_email(recipients, *args, **kwargs)
